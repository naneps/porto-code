export const MOCK_CV_GENERATOR_CODE = `
import { PortfolioData, CVStyles } from './cv-types';
import { PDFDocument, rgb, StandardFonts } from 'pdf-lib';

// --- Configuration ---
// This is a conceptual representation for display in the editor.
// Actual PDF styling and generation logic is in 'utils/cvGenerator.ts'.
const CV_TEMPLATE_STYLES: CVStyles = {
  font: 'Helvetica',
  fontSize: 10,
  lineHeight: 1.4,
  accentColor: '#007ACC', // VSCode blue
  sectionTitleSize: 14,
  margin: 50,
};

// --- Data Fetching Simulation ---
async function fetchPortfolioData(userId: string): Promise<PortfolioData> {
  console.log(\`Fetching portfolio data for user: \${userId}...\`);
  // In a real scenario, this would fetch from a database or API.
  // For this simulation, we assume data is passed directly or available globally.
  // The actual 'PortfolioData' from 'constants.ts' is used by 'utils/cvGenerator.ts'.
  return new Promise(resolve => setTimeout(() => {
    console.log("Portfolio data fetched successfully (simulated).");
    resolve({
      name: "Nandang Eka Prasetya",
      email: "ekaprasetya2244@gmail.com",
      phone: "+6281802192111",
      summary: "Experienced Mobile Developer specializing in Flutter...",
      experience: [{ role: "Mobile Developer", company: "Yubi Technology", period: "Oct 2023 - Present", description: "Developed POS systems..." }],
      education: [{ school: "Politeknik Negeri Indramayu", major: "Informatics", period: "2020 - 2023" }],
      skills: ["Flutter", "Dart", "Firebase", "REST API"],
    } as any); // Cast as any to simplify mock for display
  }, 800));
}

// --- PDF Section Formatting (Conceptual for Display) ---
function addHeader(page: any, data: PortfolioData, styles: CVStyles) {
  console.log("Formatting CV Header (conceptual)...");
  // Conceptual representation of PDF drawing. Actual drawing is in 'utils/cvGenerator.ts'.
  // page.drawText(data.name, { x: styles.margin, y: page.getHeight() - styles.margin, font: styles.font, size: 24, color: styles.accentColor });
  // page.drawText(\`\${data.email} | \${data.phone}\`, { x: styles.margin, y: page.getHeight() - styles.margin - 20, size: styles.fontSize });
  console.log("Header formatted (conceptual).");
  return page.getHeight() - styles.margin - 40; // Placeholder for new Y
}

function addSection(page: any, title: string, content: string[], currentY: number, styles: CVStyles) {
  console.log(\`Formatting section: \${title} (conceptual)...\`);
  // Conceptual PDF drawing commands.
  // page.drawText(title.toUpperCase(), { x: styles.margin, y: currentY, font: styles.fontBold, size: styles.sectionTitleSize, color: styles.accentColor });
  // currentY -= styles.sectionTitleSize + 5;
  // content.forEach(item => {
  //   page.drawText(item, { x: styles.margin, y: currentY, size: styles.fontSize });
  //   currentY -= styles.fontSize * styles.lineHeight;
  // });
  console.log(\`Section \${title} formatted (conceptual).\`);
  return currentY - (content.length * styles.fontSize * styles.lineHeight) - 20; // Placeholder
}

// --- Main PDF Generation Logic (Conceptual for Display) ---
async function generateCV_Display(portfolioData: PortfolioData): Promise<void> {
  console.log("Starting CV generation process (conceptual display)...");
  // const pdfDoc = await PDFDocument.create(); // Actual instance in utils/cvGenerator.ts
  // const page = pdfDoc.addPage();
  console.log("Simulating PDF document setup...");

  // let currentY = addHeader(page, portfolioData, CV_TEMPLATE_STYLES);
  // currentY = addSection(page, "Summary", [portfolioData.summary || ""], currentY, CV_TEMPLATE_STYLES);
  // ... and so on for other sections ...

  console.log("Conceptual PDF generation steps complete.");
  // const pdfBytes = await pdfDoc.save(); // Actual saving in utils/cvGenerator.ts
  // console.log("PDF bytes would be generated here.");
}

// --- Entry Point (Conceptual for Display) ---
async function main_display() {
  const userId = "nandang_eka_prasetya"; 
  try {
    const data = await fetchPortfolioData(userId); // Simulated fetch
    // await generateCV_Display(data); // Simulated generation for display
    console.log("CV generation script finished (conceptual display). Actual PDF generated by 'Run CV Generator' command.");
  } catch (error) {
    console.error("Error during conceptual CV generation:", error);
  }
}

// This script is for display in the editor. 
// The actual "Run CV Generator" command triggers logic in 'utils/cvGenerator.ts' via App.tsx.
// main_display(); // Commented out to prevent execution in browser.
`;